一、非线程安全的延迟初始化对象的示例代码

	public class UnsafeLazyInitialization {
		private static Instance instance;
		public static Instance getInstance() {
			if (instance == null) 			// 1：A线程执行
			instance = new Instance(); 		// 2：B线程执行
		return instance;
	}
}

	在UnsafeLazyInitialization类中，假设A线程执行代码1的同时，B线程执行代码2。此时，线
	程A可能会看到instance引用的对象还没有完成初始化
	
	对于UnsafeLazyInitialization类，我们可以对getInstance()方法做同步处理来实现线程安全
	的延迟初始化。示例代码如下。
	
	public class SafeLazyInitialization {
    private static Instance instance;
    public synchronized static Instance getInstance() {
        if (instance == null)
            instance = new Instance();
        return instance;
    }
}
	由于对getInstance()方法做了同步处理，synchronized将导致性能开销。如果getInstance()方
	法被多个线程频繁的调用，将会导致程序执行性能的下降。反之，如果getInstance()方法不会被
	多个线程频繁的调用，那么这个延迟初始化方案将能提供令人满意的性能。
	
	在早期的JVM中，synchronized（甚至是无竞争的synchronized）存在巨大的性能开销。因此，
	人们想出了一个“聪明”的技巧：双重检查锁定（Double-Checked Locking）。人们想通过双重检查
	锁定来降低同步的开销。下面是使用双重检查锁定来实现延迟初始化的示例代码
	
	public class DoubleCheckedLocking {                     // 1
    private static Instance instance;                       // 2
    public static Instance getInstance() {                  // 3
        if (instance == null) {                             // 4:第一次检查
            synchronized (DoubleCheckedLocking.class) {     // 5:加锁
                if (instance == null)                       // 6:第二次检查
                    instance = new Instance();              // 7:问题的根源出在这里
            } // 8
        } // 9
        return instance; // 10
    } // 11
}

	如上面代码所示，如果第一次检查instance不为null，那么就不需要执行下面的加锁和初始
	化操作。因此，可以大幅降低synchronized带来的性能开销。上面代码表面上看起来，似乎两全其美。
	
·	多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。·在对象创建好之后，执行getInstance()方法将不需要获取锁，直接返回已创建好的对象。

	双重检查锁定看起来似乎很完美，但这是一个错误的优化！在线程执行到第4行，代码读取到instance不为null时，instance引用的对象有可能还没有完成初始化。
	
	前面的双重检查锁定示例代码的第7行（instance=new Instance();）创建了一个对象。这一行代码可以分解为如下的3行伪代码。
	memory = allocate();　　// 1：分配对象的内存空间
	ctorInstance(memory);　// 2：初始化对象
	instance = memory;　　// 3：设置instance指向刚分配的内存地址
	
	上面3行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的）。2和3之间重排序之后的执行时序如下。
	memory = allocate();　　// 1：分配对象的内存空间
	instance = memory;　　// 3：设置instance指向刚分配的内存地址
	// 注意，此时对象还没有被初始化！
	ctorInstance(memory);　// 2：初始化对象
		
	DoubleCheckedLocking示例代码的第7行（instance=new Singleton();）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将
	访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！
	
	对于前面的基于双重检查锁定来实现延迟初始化的方案（指DoubleCheckedLocking示例代码），只需要做一点小的修改（把instance声明为volatile型），就可以实现线程安全的延迟初始
	化。请看下面的示例代码。
	
	public class SafeDoubleCheckedLocking {
    private volatile static Instance instance;
    public static Instance getInstance() {
        if (instance == null) {
            synchronized (SafeDoubleCheckedLocking.class) {
                if (instance == null)
                    instance = new Instance(); // instance为volatile，现在没问题了
            }
        }
        return instance;
    }
}

	当声明对象的引用为volatile后，3行伪代码中的2和3之间的重排序，在多线程环境中将会被禁止。
	
	
	
	
	
	
	
	
	